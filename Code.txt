(No subject)

Ann Mariya Jaimon
​
Yahkoob P;
​
Ashna Mariya Shaji;
​+4 others
​
​
​
​
RelayCommand.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;

namespace BankManagementSystem.Commands
{
    /// <summary>
    /// Represents a command that can be executed.
    /// </summary>
    public class RelayCommand : ICommand
    {
        /// <summary>
        /// The action to execute when the command is invoked.
        /// </summary>
        private readonly Action _execute;

        /// <summary>
        /// A function that determines whether the command can be executed.
        /// </summary>
        private readonly Func<bool> _canExecute;

        /// <summary>
        /// Initializes a new instance of the RelayCommand class.
        /// </summary>
        /// <param name="execute">The action to execute when the command is invoked.</param>
        /// <param name="canExecute">A function that determines whether the command can be executed.</param>
        public RelayCommand(Action execute, Func<bool> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }

        /// <summary>
        /// Occurs when the CanExecute method of the command changes.
        /// </summary>
        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }

        /// <summary>
        /// Determines whether the command can be executed.
        /// </summary>
        /// <param name="parameter">The parameter to pass to the CanExecute method.</param>
        /// <returns>True if the command can be executed; otherwise, false.</returns>
        public bool CanExecute(object parameter)
        {
            return _canExecute == null || _canExecute();
        }

        /// <summary>
        /// Executes the command.
        /// </summary>
        /// <param name="parameter">The parameter to pass to the Execute method.</param>
        public void Execute(object parameter)
        {
            _execute();
        }
    }
}
--------------------------------------------------------------------------------
AccountMemoryRepo.cs

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using BankManagementSystem.Exceptions;
using BankManagementSystem.Models;
using BankManagementSystem.Repos;

namespace BankManagementSystem.Databases
{
    /// <summary>
    /// Represents a repository for managing accounts in memory.
    /// </summary>
    public class AccountMemoryRepo : IAccountRepo
    {
        /// <summary>
        /// Gets the instance of the AccountMemoryRepo class.
        /// </summary>
        private static AccountMemoryRepo _instance;
        private ObservableCollection<Account> accounts;

        /// <summary>
        /// Initializes a new instance of the AccountMemoryRepo class.
        /// </summary>
        private AccountMemoryRepo()
        {
            accounts = new ObservableCollection<Account>();
            InitializeAccounts();
       
        }
        /// <summary>
        /// Initializes the accounts collection with default accounts.
        /// </summary>
        private void InitializeAccounts()
        {
            accounts.Add(new Account
            {
                AccountNumber = 1234,
                Name = "Minnu",
                Balance = 0,
                Type = "savings",
                Email = "minnu@gmail.com",
                PhoneNumber = "5236526526",
                Address = "Address",
                IsActive = true,
                InterestPercentage = "0",
                TransactionCount = 0,
                LastTransactionDate = DateTime.Now,
            });
            accounts.Add(new Account
            {
                AccountNumber = 12345,
                Name = "Ashna",
                Balance = 0,
                Type = "current",
                Email = "ashna@gmail.com",
                PhoneNumber = "5236526526",
                Address = "address",
                IsActive = true,
                InterestPercentage = "0",
                TransactionCount = 0,
                LastTransactionDate = DateTime.Now,
            });
        }
       
        /// <summary>
        /// Creates an object for the AccountMemoryRepo class
        /// </summary>
        public static AccountMemoryRepo Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new AccountMemoryRepo();
                }
                return _instance;
            }
        }


        /// <summary>
        /// Creates a new account in the repository.
        /// </summary>
        /// <param name="account">The account to create.</param>
        /// <exception cref="AccountException">Thrown if an error occurs while creating the account.</exception>
        public void Create(Account account)
        {
            try
            {
                accounts.Add(account);
            }
            catch(AccountException ae)
            {
                throw new AccountException("Error in creating account");
            }
            catch (Exception ex)
            {
                throw ex;
            }
           
        }

        /// <summary>
        /// Updates an existing account in the repository.
        /// </summary>
        /// <param name="account">The account to update.</param>
        /// <exception cref="AccountException">Thrown if the account does not exist.</exception>
        public void Update(Account account)
        {
            try
            {
                var existingAccount = accounts.FirstOrDefault(a => a.AccountNumber == account.AccountNumber);
                if (existingAccount != null)
                {
                    existingAccount.Address = account.Address;
                }
                else
                {
                    throw new AccountException("Account doesn't exists");
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        /// <summary>
        /// Retrieves all accounts from the repository.
        /// </summary>
        /// <returns>A collection of all accounts in the repository.</returns>
        /// <exception cref="AccountException">Thrown if an error occurs while reading accounts.</exception>
        public ObservableCollection<Account> ReadAll()
        {
            try
            {
                return accounts;
            }
            catch(AccountException ae)
            {
                throw new AccountException("Error reading accounts");
            }
            catch(Exception ex)
            {
                throw ex;
            }
           
        }

        /// <summary>
        /// Deletes an account from the repository.
        /// </summary>
        /// <param name="acNo">The account number of the account to delete.</param>
        /// <param name="account">The account to delete.</param>
        public void Delete(Account account)
        {
            try
            {
                var existingAccount = accounts.FirstOrDefault(a => a.AccountNumber == account.AccountNumber);
                if (existingAccount != null)
                {
                    existingAccount.IsActive = false;
                }
                else
                {
                    throw new AccountException("Account doesn't exists");
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Deposits a specified amount into an account.
        /// </summary>
        /// <param name="acNo">The account number of the account to deposit into.</param>
        /// <param name="Amount">The amount to deposit.</param>
        /// <exception cref="AccountException">Thrown if the account does not exist</exception>
        public void Deposit(int acNo, int Amount)
        {
            try
            {
                var account = accounts.FirstOrDefault(a => a.AccountNumber == acNo);
                if (account != null)
                {
                    account.Balance = account.Balance + Amount;
                    account.LastTransactionDate = DateTime.Now;
                    account.TransactionCount = account.TransactionCount + 1;

                }
                else
                {
                    throw new AccountException("Account Not Found , Please input valid account number");
                }
            }
            catch(Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Withdraws a specified amount from an account.
        /// </summary>
        /// <param name="acNo">The account number of the account to withdraw from.</param>
        /// <param name="Amount">The amount to withdraw.</param>
        /// <exception cref="AccountException">Thrown if the account does not exist or if the balance is insufficient.</exception>
        public void Withdrw(int acNo, int Amount)
        {
            try
            {
                var account = accounts.FirstOrDefault(a => a.AccountNumber == acNo);
                if (account != null)
                {
                    if (account.Balance < Amount)
                    {
                        throw new AccountException("Insufficient balance");
                       
                    }
                    account.Balance = account.Balance - Amount;
                    account.LastTransactionDate = DateTime.Now;
                    account.TransactionCount = account.TransactionCount + 1;              

                }
                else
                {
                    throw new AccountException("Account Not Found , Please input valid account number");
                }
            }
            catch(Exception ex)
            {
                throw ex;
            }
           
        }

        public void CalculateInterestAndUpdateBalance()
        {
            throw new NotImplementedException();
        }
    }
}
-------------------------------------------------------------------------------------------
AccountException.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BankManagementSystem.Exceptions
{
    /// <summary>
    /// Represents the userdefined exception class
    /// </summary>
    public class AccountException : Exception
    {
        public AccountException() : base() { }

        public AccountException(string message) : base(message) { }

    }
}
----------------------------------------------------------------------------------
Account.cs

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BankManagementSystem.Models
{
    /// <summary>
    /// Represents a bank account.
    /// </summary>
    public class Account : INotifyPropertyChanged
    {
        /// <summary>
        /// Gets or sets the account number.
        /// </summary>
        public int AccountNumber { get; set; }

        /// <summary>
        /// Gets or sets the account holder's name.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the account balance.
        /// </summary>
        private decimal _balance;
        public decimal Balance
        {
            get { return _balance; }
            set
            {
                _balance = value;
                OnPropertyChanged(nameof(Balance));
            }
        }

        /// <summary>
        /// Gets or sets the account type (e.g. savings, current).
        /// </summary>
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the account holder's email address.
        /// </summary>
        public String Email { get; set; }

        /// <summary>
        /// Gets or sets the account holder's phone number.
        /// </summary>
        public String PhoneNumber { get; set; }

        /// <summary>
        /// Gets or sets the account holder's address.
        /// </summary>
        private string _address;
        public string Address
        {
            get { return _address; }
            set
            {
                _address = value;
                OnPropertyChanged(nameof(Address));
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the account is active.
        /// </summary>  
        private bool _isActive;
        public bool IsActive
        {
            get
            {
                return _isActive;
            }
            set
            {
                _isActive = value;
                OnPropertyChanged(nameof(IsActive));
            }
        }

        /// <summary>
        /// Gets or sets the interest percentage for the account.
        /// </summary>
        public string InterestPercentage { get; set; }

        /// <summary>
        /// Gets or sets the number of transactions made on the account.
        /// </summary>
        private int _transactionCount;
        public int TransactionCount
        {
            get { return _transactionCount; }
            set
            {
                _transactionCount = value;
                OnPropertyChanged(nameof(TransactionCount));
            }
        }

        /// <summary>
        /// Gets or sets the date of the last transaction made on the account.
        /// </summary>
        private DateTime _lastTransactionDate;
        public DateTime LastTransactionDate
        {
            get { return _lastTransactionDate; }
            set
            {
                _lastTransactionDate = value;
                OnPropertyChanged(nameof(LastTransactionDate));
            }
        }

        /// <summary>
        /// Occurs when a property value changes.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises the PropertyChanged event.
        /// </summary>
        /// <param name="propertyName">The name of the property that changed.</param>
        private void OnPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
---------------------------------------------------------------------------------------
AccountListWindow.xaml

<Window x:Class="BankManagementSystem.AccountListWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankManagementSystem" xmlns:viewmodels="clr-namespace:BankManagementSystem.ViewModels" d:DataContext="{d:DesignInstance Type=viewmodels:AccountViewModel}"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800" Closed="Window_Closed" Closing="Window_Closing">
    <Grid MaxWidth="1200" Margin="10 10 10 10">
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>

        <TextBlock Grid.Row="0" Text="Account Manager"
           FontSize="24"
           FontWeight="bold"
           TextAlignment="center"/>
        <Button Grid.Row="1" Content="Add Account" Width="200" Height="30" Margin="0 10 0 0" HorizontalAlignment="left"
        Background="#9e0344" Foreground="yellow" FontWeight="bold"
        Click="Button_Click"/>
        <DataGrid x:Name="grdAccounts" Grid.Row="2" Margin="0 10 0 0"
           SelectedItem="{Binding SelectedAccount , Mode=TwoWay}" IsReadOnly="True" AreRowDetailsFrozen="True" AutoGenerateColumns="False"
          SelectionMode="Single" ItemsSource="{Binding Accounts}"
          >
            <DataGrid.Columns>
                <DataGridTextColumn Header="Account Number" Binding="{Binding AccountNumber}"/>
                <DataGridTextColumn Header="Name" Binding="{Binding Name}"/>
                <DataGridTextColumn Header="Balance" Binding="{Binding Balance}"/>
                <DataGridTextColumn Header="Type" Binding="{Binding Type}"/>
                <DataGridTextColumn Header="Email" Binding="{Binding Email}"/>
                <DataGridTextColumn Header="Phone Number" Binding="{Binding PhoneNumber}"/>
                <DataGridTextColumn Header="Address" Binding="{Binding Address}"/>
                <DataGridTextColumn Header="IsActive" Binding="{Binding IsActive}"/>
                <DataGridTextColumn Header="Interest Percentage" Binding="{Binding InterestPercentage}"/>
                <DataGridTextColumn Header="Transaction Count" Binding="{Binding TransactionCount}"/>
                <DataGridTextColumn Header="Last Transaction Date" Binding="{Binding LastTransactionDate}"/>


            </DataGrid.Columns>
        </DataGrid>
        <StackPanel Grid.Row="3" Orientation="Horizontal" HorizontalAlignment="Right">
            <Button x:Name="btnView" Content="View Account" Width="200" Height="30"
Margin="10 10 0 0" HorizontalAlignment="Right"
Background="#9e0344" Foreground="yellow" FontWeight="bold"
Click="btnView_Click"/>

            <Button x:Name="btnDelete" Content="Mark As Delete" Width="200" Height="30"
Margin="10 10 0 0" HorizontalAlignment="Right"
Background="#9e0344" Foreground="yellow" FontWeight="bold" Command="{Binding DeleteCommand}"/>

            <Button  Content="Update Account" Width="200" Height="30"
        Margin="30 10 0 0" HorizontalAlignment="Right"
        Background="#9e0344" Foreground="yellow" FontWeight="bold"
        Click="Button_Click_1"/>
        </StackPanel>

    </Grid>

</Window>
-----------------------------------------------------------------------------------
AccountListWindow.xaml.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using BankManagementSystem.Pages;

namespace BankManagementSystem
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class AccountListWindow : Window
    {
        public AccountListWindow()
        {
            InitializeComponent();
            this.DataContext = FormConfig.accountViewModel;
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            FormConfig.newAccountWindow.Show();
            NewAccountWindow newAccountWindow = (NewAccountWindow)FormConfig.newAccountWindow;
            FormConfig.accountViewModel.NewWindowClose = newAccountWindow.WindowClose;

        }

        private void Window_Closed(object sender, EventArgs e)
        {
            Application.Current.Shutdown();
        }

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            if (grdAccounts.SelectedIndex == -1)
            {
                var result = MessageBox.Show(messageBoxText: "Please select an account to edit",
                    caption: "Alert",
                    button: MessageBoxButton.OK,
                    icon: MessageBoxImage.Information);
                return;
            }
            FormConfig.editAccountWindow.Show();

            EditAccountWindow editAccountWindow = (EditAccountWindow)FormConfig.editAccountWindow;
            FormConfig.accountViewModel.EditWindowClose = editAccountWindow.WindowClose;
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }

        private void btnView_Click(object sender, RoutedEventArgs e)
        {
            if (grdAccounts.SelectedIndex == -1)
            {
                var result = MessageBox.Show(messageBoxText: "Please select an account",
                    caption: "Alert",
                    button: MessageBoxButton.OK,
                    icon: MessageBoxImage.Information);
                return;
            }
            FormConfig.accountViewWindow.Show();

        }
    }
}
--------------------------------------------------------------------------------------------
AccountViewWindow.xaml

<Window x:Class="BankManagementSystem.Pages.AccountViewWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankManagementSystem.Pages" xmlns:viewmodels="clr-namespace:BankManagementSystem.ViewModels" d:DataContext="{d:DesignInstance Type=viewmodels:AccountViewModel}"
        mc:Ignorable="d"
        Title="AccountViewWindow" Height="450" Width="800" Closing="Window_Closing">
    <Grid MaxWidth="1200">
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <TextBlock Text="Account Details" FontSize="32" FontWeight="bold" Grid.Row="0" Margin="10 20 10 10"/>
        <Grid Grid.Row="1" Margin="10 20 10 10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <!--<ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>-->
            </Grid.ColumnDefinitions>
            <Border x:Name="brd1" Grid.Column="0" CornerRadius="2" BorderThickness="1" BorderBrush="gray">
                <StackPanel Margin="10 10 10 10">
                    <TextBlock FontWeight="bold" FontSize="12" Margin="10 10 10 2">Account Balance</TextBlock>
                    <TextBlock  FontSize="24" Margin="20 2 10 2" Foreground="green" Text="{Binding SelectedAccount.Balance}"/>
                </StackPanel>
            </Border>
        </Grid>
        <Grid Grid.Row="2" Margin="10 20 10 10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="250"/>
            </Grid.ColumnDefinitions>
            <Border Grid.Column="0" Background="Teal"
                CornerRadius="3">
                <StackPanel Orientation="vertical">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Account Number" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.AccountNumber}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Name" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.Name}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Type" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.Type}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Email" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.Email}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Phone Number" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.PhoneNumber}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Address" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.Address}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Transaction Count" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.TransactionCount}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Last Transaction" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.LastTransactionDate}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Interest Percentage" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                        <TextBlock  Text="{Binding SelectedAccount.InterestPercentage}" FontWeight="Bold" Foreground="White" Margin="10" Width="150"/>
                    </StackPanel>

                </StackPanel>
            </Border>

            <Border Grid.Column="1" Background="#9e0344" Margin="10 0 0 0" CornerRadius="3">

            </Border>
        </Grid>
    </Grid>
</Window>
---------------------------------------------------------------------------------------
AccountViewWindow.xaml.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankManagementSystem.Pages
{
    /// <summary>
    /// Interaction logic for AccountViewWindow.xaml
    /// </summary>
    public partial class AccountViewWindow : Window
    {
        public AccountViewWindow()
        {
            InitializeComponent();
            this.DataContext = FormConfig.accountViewModel;
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }
}
--------------------------------------------------------------------------------------------------
DashBoardWindow.xaml

<Window x:Class="BankManagementSystem.Pages.DashBoardWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankManagementSystem.Pages"
        mc:Ignorable="d"
        Title="DashBoardWindow" Height="450" Width="800" Closed="Window_Closed" Closing="Window_Closing">

   
   
    <Grid MaxWidth="1200">
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <TextBlock Text="DashBoard" FontSize="32" FontWeight="bold" Grid.Row="0" Margin="10 20 10 10"/>
        <Grid Grid.Row="1" Margin="10 20 10 10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="brd1" Grid.Column="0" CornerRadius="2" BorderThickness="1" BorderBrush="gray">
                <StackPanel Margin="10 10 10 10">
                    <TextBlock FontWeight="bold" FontSize="10" Margin="10 10 10 2">Your Balance</TextBlock>
                    <TextBlock  FontSize="42" Margin="30 2 10 2" Foreground="green">$2000</TextBlock>
                </StackPanel>
            </Border>

            <Button x:Name="btnDeposit" Grid.Column="1" Margin="20 0 0 0" Content="Deposit" FontSize="12"
                  Background="white" FontWeight="Bold"
                  Foreground="black"
                    Click="btnDeposit_Click"/>
           

            <Button x:Name="btnWithdraw" Grid.Column="2" Margin="20 0 0 0" Content="Withdraw" FontSize="12"
                       Background="white" FontWeight="Bold"
                        Foreground="black"
                    Click="btnWithdraw_Click"/>
           
            <Button x:Name="btnManager" Grid.Column="3" Margin="20 0 0 0" Content="Account Manager" FontSize="12"
           Background="white" FontWeight="Bold"
            Foreground="black"
                    Click="btnManager_Click"/>
        </Grid>
        <Grid Grid.Row="2" Margin="10 20 10 10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="250"/>
            </Grid.ColumnDefinitions>
            <Border Grid.Column="0" Background="Teal"
                    CornerRadius="3">
               
            </Border>

            <Border Grid.Column="1" Background="#9e0344" Margin="10 0 0 0" CornerRadius="3">

            </Border>
        </Grid>
    </Grid>
</Window>
-----------------------------------------------------------------------------------------------------
DashBoardWindow.xaml.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankManagementSystem.Pages
{
    /// <summary>
    /// Interaction logic for DashBoardWindow.xaml
    /// </summary>
    public partial class DashBoardWindow : Window
    {
        public DashBoardWindow()
        {
            InitializeComponent();
        }

        private void btnDeposit_Click(object sender, RoutedEventArgs e)
        {
            FormConfig.depositWindow.Show();
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            Application.Current.Shutdown();
        }

        private void btnManager_Click(object sender, RoutedEventArgs e)
        {
            FormConfig.accountListWindow.Show();
        }

        private void btnWithdraw_Click(object sender, RoutedEventArgs e)
        {
            FormConfig.withdrawWindow.Show();
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }
}
----------------------------------------------------------------------------------
DepositWindow.xaml

<Window x:Class="BankManagementSystem.Pages.DepositWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankManagementSystem.Pages" xmlns:viewmodels="clr-namespace:BankManagementSystem.ViewModels" d:DataContext="{d:DesignInstance Type=viewmodels:DepositViewModel}"
        mc:Ignorable="d"
        Title="DepositWindow" Height="450" Width="800" Closing="Window_Closing">
    <Grid MaxWidth="1200">
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Border Grid.Row="0" Background="AliceBlue" HorizontalAlignment="Center" VerticalAlignment="Center"
                CornerRadius="5">
            <StackPanel Margin="30">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Account Number" VerticalAlignment="Center" Width="200" FontWeight="bold"
                           FontSize="14" />
                    <TextBox Style="{StaticResource MyTextBoxStyle}" Text="{Binding AccountNumber}"/>
                </StackPanel>

                <StackPanel Orientation="Horizontal" Margin="0 10 0 0">
                    <TextBlock Text="Amount" VerticalAlignment="Center" Width="200" FontWeight="bold"
           FontSize="14"/>
                    <TextBox Style="{StaticResource MyTextBoxStyle}" Text="{Binding Amount}"/>
                </StackPanel>

                <Button Content="Deposit" Background="Green" Foreground="white" FontWeight="bold"
                        Width="250" Height="50" Margin="0 20 0 0"
                        Command="{Binding DepositCommand}"/>
            </StackPanel>
        </Border>
    </Grid>
</Window>
------------------------------------------------------------------------------------------------
DepositWindow.xaml.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankManagementSystem.Pages
{
    /// <summary>
    /// Interaction logic for DepositWindow.xaml
    /// </summary>
    public partial class DepositWindow : Window
    {
        public DepositWindow()
        {
            InitializeComponent();
            this.DataContext = FormConfig.depositViewModel;
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }
}
-------------------------------------------------------------------------------------------
EditAccountWindow.xaml

<Window x:Class="BankManagementSystem.Pages.EditAccountWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankManagementSystem.Pages" xmlns:viewmodels="clr-namespace:BankManagementSystem.ViewModels" d:DataContext="{d:DesignInstance Type=viewmodels:AccountViewModel}"
        mc:Ignorable="d"
        Title="EditAccountWindow" Height="450" Width="800" Closing="Window_Closing">
    <Grid MaxWidth="1200" Margin="0 10 0 0">
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>
        <TextBlock Grid.Row="0" TextAlignment="center" Text="Edit Account"/>
        <StackPanel Grid.Row="1" Orientation="Vertical">
            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Account Number" VerticalAlignment="Center"/>
                <TextBox  Style="{StaticResource MyTextBoxStyle}" Text="{Binding SelectedAccount.AccountNumber}" IsEnabled="false"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Name" VerticalAlignment="Center"/>
                <TextBox  Style="{StaticResource MyTextBoxStyle}" Text="{Binding SelectedAccount.Name}" IsEnabled="false"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Balance" VerticalAlignment="Center"/>
                <TextBox  Style="{StaticResource MyTextBoxStyle}" Text="{Binding SelectedAccount.Balance}" IsEnabled="false"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Type" VerticalAlignment="Center"/>
                <RadioButton Content="current" Margin="100 0 0 0" IsEnabled="False" />
                <RadioButton Content="savings" Margin="10 0 0 0" IsEnabled="false"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Email" VerticalAlignment="Center"/>
                <TextBox  Style="{StaticResource MyTextBoxStyle}" Text="{Binding SelectedAccount.Email}" IsEnabled="false"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Phone" VerticalAlignment="Center"/>
                <TextBox  Style="{StaticResource MyTextBoxStyle}" Text="{Binding SelectedAccount.Email}" IsEnabled="false"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Address" VerticalAlignment="Center"/>
                <TextBox  Style="{StaticResource MyTextBoxStyle}" Text="{Binding SelectedAccount.Address}"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="IsActive" VerticalAlignment="Center"/>
                <CheckBox Content="" Margin="100 0 0 0" IsEnabled="false"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Interest Percentage" VerticalAlignment="Center"/>
                <ComboBox Margin="100 0 0 0" IsEnabled="false">
                    <ComboBoxItem Content="5%"/>
                    <ComboBoxItem Content="10%"/>
                    <ComboBoxItem Content="15%"/>
                </ComboBox>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Transaction Count" VerticalAlignment="Center"/>
                <TextBox Style="{StaticResource MyTextBoxStyle}" IsEnabled="False" Text="{Binding SelectedAccount.TransactionCount}"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Last Transaction Date" VerticalAlignment="Center"/>
                <TextBox Style="{StaticResource MyTextBoxStyle}" IsEnabled="False" Text="{Binding SelectedAccount.LastTransactionDate}"/>
            </StackPanel>
        </StackPanel>

        <Button HorizontalAlignment="right" Grid.Row="2" Width="200" Background="Teal" Content="Save" Foreground="White" FontWeight="bold"
        Height="50"
        Margin="0 10 20 20"
                Command="{Binding UpdateCommand}"/>

    </Grid>
</Window>
-----------------------------------------------------------------------------------------------------
EditAccountWindow.xaml.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankManagementSystem.Pages
{
    /// <summary>
    /// Interaction logic for EditAccountWindow.xaml
    /// </summary>
    public partial class EditAccountWindow : Window
    {
        public EditAccountWindow()
        {
            InitializeComponent();
            this.DataContext = FormConfig.accountViewModel;
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }

        public void WindowClose()
        {
            this.Hide();
        }
    }
}
------------------------------------------------------------------------------------------
LoginPageWindow.xaml

<Window x:Class="BankManagementSystem.Pages.LoginPageWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankManagementSystem.Pages"
        mc:Ignorable="d"
        Title="LoginPageWindow" Height="450" Width="800" Closed="Window_Closed">
    <Grid >
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Border Grid.Column="0"  Background="AliceBlue" Width="300" Height="300" CornerRadius="5">
            <StackPanel Orientation="Vertical" VerticalAlignment="Center">
                <StackPanel Orientation="Vertical" Margin="10 10 10 0">
                    <TextBlock  Text="Username" FontWeight="bold" Margin="10 10 10 5" FontSize="10"/>
                    <TextBox x:Name="txtUsername" Margin="10 0 10 10" Height="30" Padding="4 4 4 4" />
                </StackPanel>

                <StackPanel Orientation="Vertical" Margin="10 0 10 10">
                    <TextBlock Text="Password" FontWeight="bold" Margin="10 10 10 5" FontSize="10"/>
                    <PasswordBox x:Name="txtPassword" Margin="10 0 10 10" Height="30" Padding="4 4 4 4" />
                   
                </StackPanel>

                <Button Width="200" Content="Login" Height="30" Background="Teal" Foreground="white" FontWeight="Bold" FontSize="10" Margin="10 10 10 10" Click="Button_Click"/>
            </StackPanel>
           
        </Border>
    </Grid>
</Window>
-----------------------------------------------------------------------------
LoginPageWindow.xaml.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankManagementSystem.Pages
{
    /// <summary>
    /// Interaction logic for LoginPageWindow.xaml
    /// </summary>
    public partial class LoginPageWindow : Window
    {
        public LoginPageWindow()
        {
            InitializeComponent();

        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            if(txtUsername.Text == "quest" && txtPassword.Password == "1234")
            {
                FormConfig.dashBoardWindow.Show();
                this.Hide();
            }
            else
            {
                MessageBox.Show(messageBoxText: $"Invalid username or password",
                   caption: "Warning",
                   button: MessageBoxButton.OK,
                   icon: MessageBoxImage.Warning);
                return;
            }
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            Application.Current.Shutdown();
        }
    }
}
-----------------------------------------------------------------
NewAccountWindow.xaml

<Window x:Class="BankManagementSystem.Pages.NewAccountWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankManagementSystem.Pages" xmlns:viewmodels="clr-namespace:BankManagementSystem.ViewModels" d:DataContext="{d:DesignInstance Type=viewmodels:AccountViewModel}"
        mc:Ignorable="d"
        Title="NewAccountWindow" Height="450" Width="800" Closing="Window_Closing">
    <Grid MaxWidth="1200" Margin="0 10 0 0">
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>
        <TextBlock Grid.Row="0" TextAlignment="center" Text="New Account"
                   FontSize="22" FontWeight="Bold"/>
        <StackPanel Grid.Row="1" Orientation="Vertical" Margin="0 10 0 0">
            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Account Number" VerticalAlignment="Center"/>
                <TextBox Style="{StaticResource MyTextBoxStyle}" Text="{Binding NewAccount.AccountNumber}"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Name"/>
                <TextBox  Style="{StaticResource MyTextBoxStyle}" Text="{Binding NewAccount.Name}"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Balance" />
                <TextBox  Style="{StaticResource MyTextBoxStyle}" Text="{Binding NewAccount.Balance}" />
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10" >
                <TextBlock Width="150" Text="Type"/>
                <RadioButton Content="current" Margin="100 0 0 0" IsChecked="{Binding NewAccount.Type, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=current}"/>
                <RadioButton Content="savings" Margin="10 0 0 0" IsChecked="{Binding NewAccount.Type, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=savings}"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Email"/>
                <TextBox  Style="{StaticResource MyTextBoxStyle}" Text="{Binding NewAccount.Email}"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Phone"/>
                <TextBox  Style="{StaticResource MyTextBoxStyle}" Text="{Binding NewAccount.PhoneNumber}"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Address"/>
                <TextBox  Style="{StaticResource MyTextBoxStyle}" Text="{Binding NewAccount.Address}"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="IsActive"/>
                <CheckBox Content="" Margin="100 0 0 0" IsChecked="{Binding NewAccount.IsActive}"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Interest Percentage"/>
                <ComboBox Margin="100 0 0 0" SelectedItem ="{Binding NewAccount.InterestPercentage ,Converter={StaticResource ComboBoxItemToStringConverter}}">
                    <ComboBoxItem Content="5"/>
                    <ComboBoxItem Content="10"/>
                    <ComboBoxItem Content="15"/>
                </ComboBox>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Transaction Count"/>
                <TextBox Style="{StaticResource MyTextBoxStyle}" Margin="100 0 0 0" Text="{Binding NewAccount.TransactionCount}"/>
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="10 10 10 10">
                <TextBlock Width="150" Text="Last Transaction Date"/>
                <TextBox Style="{StaticResource MyTextBoxStyle}" Margin="100 0 0 0" Text="{Binding NewAccount.LastTransactionDate}"/>
            </StackPanel>
        </StackPanel>

        <Button HorizontalAlignment="right" Grid.Row="2" Width="200" Background="Teal" Content="Save" Foreground="White" FontWeight="bold"
                Height="50"
                Margin="0 10 20 20"
                Command="{Binding CreateCommand}"/>

    </Grid>
</Window>
------------------------------------------------------------------------------------------------------------------
NewAccountWindow.xaml.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankManagementSystem.Pages
{
    /// <summary>
    /// Interaction logic for NewAccountWindow.xaml
    /// </summary>
    public partial class NewAccountWindow : Window
    {
        public NewAccountWindow()
        {
            InitializeComponent();
            this.DataContext = FormConfig.accountViewModel;
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }

        public void WindowClose()
        {
            this.Hide();
        }
    }
}
----------------------------------------------------------------------------------------------
WithdrawWindow.xaml

<Window x:Class="BankManagementSystem.Pages.WithdrawWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BankManagementSystem.Pages"
        mc:Ignorable="d"
        Title="WithdrawWindow" Height="450" Width="800" Closing="Window_Closing">
    <Grid MaxWidth="1200">
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Border Grid.Row="0" Background="AliceBlue" HorizontalAlignment="Center" VerticalAlignment="Center"
            CornerRadius="5">
            <StackPanel Margin="30">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Account Number" VerticalAlignment="Center" Width="200" FontWeight="bold"
                       FontSize="14"/>
                    <TextBox Style="{StaticResource MyTextBoxStyle}" Text="{Binding AccountNumber}"/>
                </StackPanel>

                <StackPanel Orientation="Horizontal" Margin="0 10 0 0">
                    <TextBlock Text="Amount" VerticalAlignment="Center" Width="200" FontWeight="bold"
       FontSize="14"/>
                    <TextBox Style="{StaticResource MyTextBoxStyle}" Text="{Binding Amount}"/>
                </StackPanel>

                <Button Content="Withdraw" Background="Green" Foreground="white" FontWeight="bold"
                    Width="250" Height="50" Margin="0 20 0 0"
                        Command="{Binding WithdrawCommand}"/>
            </StackPanel>
        </Border>
    </Grid>
</Window>
------------------------------------------------------------------------------------------
WithdrawWindow.xaml.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace BankManagementSystem.Pages
{
    /// <summary>
    /// Interaction logic for WithdrawWindow.xaml
    /// </summary>
    public partial class WithdrawWindow : Window
    {
        public WithdrawWindow()
        {
            InitializeComponent();
            this.DataContext = FormConfig.withdrawViewModel;
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }
    }
}
-------------------------------------------------------------------------------------------
IAccountRepo.cs

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BankManagementSystem.Models;

namespace BankManagementSystem.Repos
{
    /// <summary>
    /// Represents a repository for managing accounts.
    /// </summary>
    public interface IAccountRepo
    {
        /// <summary>
        /// Creates a new account.
        /// </summary>
        /// <param name="account">The account to create.</param>
        void Create(Account account);

        /// <summary>
        /// Updates an existing account.
        /// </summary>
        /// <param name="account">The account to update.</param>
        void Update(Account account);

        /// <summary>
        /// Deletes an account.
        /// </summary>
        /// <param name="acNo">The account number of the account to delete.</param>
        /// <param name="account">The account to delete.</param>
        void Delete(Account account);

        /// <summary>
        /// Deposits money into an account.
        /// </summary>
        /// <param name="acNo">The account number of the account to deposit into.</param>
        /// <param name="Amount">The amount to deposit.</param>
        void Deposit(int acNo, int Amount);

        /// <summary>
        /// Withdraws money from an account.
        /// </summary>
        /// <param name="acNo">The account number of the account to withdraw from.</param>
        /// <param name="Amount">The amount to withdraw.</param>
        void Withdrw(int acNo, int Amount);

        /// <summary>
        /// Calculates the interest and updates the balance for all accounts.
        /// </summary>
        void CalculateInterestAndUpdateBalance();

        /// <summary>
        /// Retrieves all accounts.
        /// </summary>
        /// <returns>A collection of all accounts.</returns>
        ObservableCollection<Account> ReadAll();
    }
}
------------------------------------------------------------------------------
AccountViewModel.cs

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using BankManagementSystem.Commands;
using BankManagementSystem.Databases;
using BankManagementSystem.Exceptions;
using BankManagementSystem.Models;
using BankManagementSystem.Repos;

namespace BankManagementSystem.ViewModels
{
    public delegate void DWidnowClose();

    // <summary>
    /// Represents a view model for managing accounts.
    /// </summary>
    public class AccountViewModel : ViewModelBase
    {

        private Account _newAccount = null;
       
        public DWidnowClose NewWindowClose;
        public DWidnowClose EditWindowClose;

        /// <summary>
        /// Gets or sets the new account.
        /// </summary>
        public Account NewAccount
        {
            get { return _newAccount; }
            set
            {
                _newAccount = value;
                onPropertyChanged(nameof(NewAccount));
            }
        }

        private Account _selectedAccount = null;
        /// <summary>
        /// Gets or sets the selected account.
        /// </summary>
        public Account SelectedAccount
        {
            get => _selectedAccount;
            set {
                _selectedAccount = value;
                onPropertyChanged(nameof(SelectedAccount));
            }
        }



        /// <summary>
        /// Gets the accounts repository.
        /// </summary>
        private IAccountRepo _repo = AccountMemoryRepo.Instance;

        // <summary>
        /// Gets the collection of accounts.
        /// </summary>
        public ObservableCollection<Account> Accounts
        {
            get
            {
                try
                {
                    return _repo.ReadAll();
                }
                catch(AccountException ae)
                {
                    Logger.log.Error(ae.Message);
                    throw;
                }
               
            }
        }

        /// <summary>
        /// Gets the command for creating a new account.
        /// </summary>
        public ICommand CreateCommand { get; }

        /// <summary>
        /// Gets the command for updating an existing account.
        /// </summary>
        public ICommand UpdateCommand { get; }

        /// <summary>
        /// Gets the command for deleting an existing account.
        /// </summary>
        public ICommand DeleteCommand { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountViewModel"/> class.
        /// </summary>
        public AccountViewModel()
        {
            this.NewAccount = new Account
            {
                AccountNumber = 00000,
                Name = "",
                Balance = 0,
                Type = "",
                Email = "",
                PhoneNumber = "",
                Address = "",
                IsActive = false,
                InterestPercentage = "0",
                TransactionCount = 0,
                LastTransactionDate = DateTime.Now,


            };
            CreateCommand = new RelayCommand(Create);
            UpdateCommand = new RelayCommand(Update);
            DeleteCommand = new RelayCommand(Delete);
           
        }

        /// <summary>
        /// Creates a new account.
        /// </summary>

        public void Create()
        {
            Account newAccount = new Account
            {
                AccountNumber = NewAccount.AccountNumber,
                Name = NewAccount.Name,
                Balance = NewAccount.Balance,
                Type = NewAccount.Type,
                Email = NewAccount.Email,
                PhoneNumber = NewAccount.PhoneNumber,
                Address = NewAccount.Address,
                IsActive = NewAccount.IsActive,
                InterestPercentage = NewAccount.InterestPercentage,
                TransactionCount = NewAccount.TransactionCount,
                LastTransactionDate = NewAccount.LastTransactionDate,
            };
            var result = MessageBox.Show(messageBoxText: "Are you sure to create?",
                    caption: "Confirm",
                    button: MessageBoxButton.YesNo,
                    icon: MessageBoxImage.Question);
            if (result != MessageBoxResult.Yes)
            {
                return;
            }
            try
            {
                _repo.Create(newAccount);
                result = MessageBox.Show(messageBoxText: "Created Successfully",
                   caption: "Alert",
                   button: MessageBoxButton.OK,
                   icon: MessageBoxImage.Information);
                Logger.log.Info($"An account with acoount number {newAccount.AccountNumber} has been created successfully");
                this.NewAccount = new Account { AccountNumber = 0, Name = "", Balance = 0, Type = "", Email = "", PhoneNumber = "", Address = "", IsActive = false, InterestPercentage = "0", TransactionCount = 0, LastTransactionDate = DateTime.Now };
            }
            catch(AccountException ae)
            {
                Logger.log.Error(ae.Message);
            }

            if (NewWindowClose != null)
            {
                NewWindowClose();
            }
        }
        /// <summary>
        /// Updates an existing account.
        /// </summary>
        public void Update()
        {
            if (this.SelectedAccount == null)
            {
                return;
            }

            var res = MessageBox.Show(messageBoxText: "Are you sure to Update?",
                    caption: "Confirm",
                    button: MessageBoxButton.YesNo,
                    icon: MessageBoxImage.Question);

            if (res != MessageBoxResult.Yes)
            {
                return;
            }

            try
            {
                _repo.Update(this.SelectedAccount);
                this.SelectedAccount = this.SelectedAccount;
                var result = MessageBox.Show(messageBoxText: $"Account {SelectedAccount.AccountNumber} is updated successfully",
                        caption: "Alert",
                        button: MessageBoxButton.OK,
                        icon: MessageBoxImage.Information);
                Logger.log.Info($"Account {SelectedAccount.AccountNumber} is updated successfully");
            }
            catch(AccountException ae)
            {
                Logger.log.Error(ae.Message);
            }
           

            if (EditWindowClose != null)
            {
                EditWindowClose();
            }
        }

        /// <summary>
        /// Deletes an existing account.
        /// </summary>
        public void Delete()
        {
            if (this.SelectedAccount == null)
            {
                var result = MessageBox.Show(messageBoxText: "Please select an account",
                    caption: "Alert",
                    button: MessageBoxButton.OK,
                    icon: MessageBoxImage.Information);
                return;
            }

            var res = MessageBox.Show(messageBoxText: "Are you sure to Delete?",
                    caption: "Confirm",
                    button: MessageBoxButton.YesNo,
                    icon: MessageBoxImage.Question);

            if (res != MessageBoxResult.Yes)
            {
                return;
            }

            try
            {

                _repo.Delete(this.SelectedAccount);
                this.SelectedAccount = this.SelectedAccount;
                var result = MessageBox.Show(messageBoxText: $"Account {SelectedAccount.AccountNumber} is marked as deleted successfully",
                        caption: "Alert",
                        button: MessageBoxButton.OK,
                        icon: MessageBoxImage.Information);
                Logger.log.Info($"Account {SelectedAccount.AccountNumber} is marked as deleted successfully");
            }
            catch (AccountException ae)
            {
                Logger.log.Error(ae.Message);
            }
        }



    }

}
-----------------------------------------------------------------------------------------------------
DepositViewModel.cs

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BankManagementSystem.Databases;
using BankManagementSystem.Models;
using BankManagementSystem.Repos;
using System.Windows.Input;
using BankManagementSystem.Commands;
using System.Windows;
using BankManagementSystem.Exceptions;

namespace BankManagementSystem.ViewModels
{
    /// <summary>
    /// Represents a view model for depositing money into an account.
    /// </summary>
    public class DepositViewModel : ViewModelBase
    {
        /// <summary>
        /// Gets or sets the account number.
        /// </summary>
        private int _accountNumber;
        public int AccountNumber
        {
            get { return _accountNumber; }
            set
            {
                _accountNumber = value;
                onPropertyChanged(nameof(AccountNumber));
            }
        }

        /// <summary>
        /// Gets or sets the amount to deposit.
        /// </summary>
        private int _amount;
        public int Amount
        {
            get { return _amount; }
            set
            {
                _amount = value;
                onPropertyChanged(nameof(Amount));
            }
        }

        /// <summary>
        /// Gets the accounts repository.
        /// </summary>
        private IAccountRepo _repo = AccountMemoryRepo.Instance;

        /// <summary>
        /// Gets the command for depositing money into an account.
        /// </summary>
        public ICommand DepositCommand { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="DepositViewModel"/> class.
        /// </summary>
        public DepositViewModel()
        {
            DepositCommand = new RelayCommand(Deposit);
        }

        /// <summary>
        /// Deposits money into an account.
        /// </summary>
        public void Deposit()
        {
            var result = MessageBox.Show(messageBoxText: "Are you sure to Deposit?",
                    caption: "Confirm",
                    button: MessageBoxButton.YesNo,
                    icon: MessageBoxImage.Question);
            if (result != MessageBoxResult.Yes)
            {
                return;
            }
            try
            {
                _repo.Deposit(AccountNumber, Amount);
                MessageBox.Show(messageBoxText: $"Deposited Successfully to account {AccountNumber}",
                        caption: "Alert",
                        button: MessageBoxButton.OK,
                        icon: MessageBoxImage.Information);
                Logger.log.Info($"Deposited {Amount} rupees Successfully to account {AccountNumber}");
                this.AccountNumber = 0;
                this.Amount = 0;
            }
            catch (AccountException ae)
            {
                MessageBox.Show(messageBoxText: $"{ae.Message}",
                   caption: "Warning",
                   button: MessageBoxButton.OK,
                   icon: MessageBoxImage.Warning);

                Logger.log.Error(ae.Message);
            }
            catch (Exception ex)
            {
                Logger.log.Error(ex.Message);
            }
        }
    }
}
--------------------------------------------------------------------------------------
ViewModelBase.cs

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BankManagementSystem.ViewModels
{
    /// <summary>
    /// Represents a base class for view models that implements the INotifyPropertyChanged interface.
    /// </summary>
    public class ViewModelBase : INotifyPropertyChanged
    {
        /// <summary>
        /// Occurs when a property value changes.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises the PropertyChanged event.
        /// </summary>
        /// <param name="propertyName">The name of the property that changed.</param>
        public void onPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
----------------------------------------------------------------------------------------------------
WithdrawViewModel.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BankManagementSystem.Commands;
using BankManagementSystem.Databases;
using BankManagementSystem.Repos;
using System.Windows.Input;
using System.Windows;
using BankManagementSystem.Exceptions;

namespace BankManagementSystem.ViewModels
{
    /// <summary>
    /// Represents a view model for withdrawing money from an account.
    /// </summary>
    public class WithdrawViewModel : ViewModelBase
    {
        /// <summary>
        /// Gets or sets the account number.
        /// </summary>
        private int _accountNumber;
        public int AccountNumber
        {
            get { return _accountNumber; }
            set
            {
                _accountNumber = value;
                onPropertyChanged(nameof(AccountNumber));
            }
        }

        /// <summary>
        /// Gets or sets the amount to withdraw.
        /// </summary>
        private int _amount;
        public int Amount
        {
            get { return _amount; }
            set
            {
                _amount = value;
                onPropertyChanged(nameof(Amount));
            }
        }

        /// <summary>
        /// Gets the accounts repository.
        /// </summary>
        private IAccountRepo _repo = AccountMemoryRepo.Instance;

        /// <summary>
        /// Gets the command for withdrawing money from an account.
        /// </summary>
        public ICommand WithdrawCommand { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="WithdrawViewModel"/> class.
        /// </summary>
        public WithdrawViewModel()
        {
            WithdrawCommand = new RelayCommand(Withdraw);
        }

        /// <summary>
        /// Withdraws money from an account.
        /// </summary>
        /// <exception cref="AccountException">Thrown if the account does not exist or if the balance is insufficient.</exception>
        public void Withdraw()
        {
            var result = MessageBox.Show(messageBoxText: "Are you sure to Withdraw?",
                    caption: "Confirm",
                    button: MessageBoxButton.YesNo,
                    icon: MessageBoxImage.Question);
            if (result != MessageBoxResult.Yes)
            {
                return;
            }
            try
            {
                _repo.Withdrw(AccountNumber, Amount);
                MessageBox.Show(messageBoxText: $"Withdrawed Successfully from account {AccountNumber}",
                        caption: "Alert",
                        button: MessageBoxButton.OK,
                        icon: MessageBoxImage.Information);
                Logger.log.Info($"Withdrawed {Amount} rupees Successfully from account {AccountNumber}");
                this.AccountNumber = 0;
                this.Amount = 0;
            }
            catch (AccountException ae)
            {
                MessageBox.Show(messageBoxText: $"{ae.Message}",
                   caption: "Warning",
                   button: MessageBoxButton.OK,
                   icon: MessageBoxImage.Warning);

                Logger.log.Error(ae.Message);
            }
            catch (Exception ex)
            {
                Logger.log.Error(ex.Message);
            }
        }
    }
}
---------------------------------------------------------------------------------------
BooleanToVisibilityConverter.cs

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Data;

namespace BankManagementSystem
{
    public class BooleanToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value == null || parameter == null)
                return false;

            return value.ToString().Equals(parameter.ToString(), StringComparison.OrdinalIgnoreCase);
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value == null || parameter == null)
                return null;

            return (bool)value ? parameter.ToString() : null;
        }
    }
}
-----------------------------------------------------------------------------
ComboBoxItemToStringConverter.cs

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Controls;
using System.Windows.Data;

namespace BankManagementSystem
{
    public class ComboBoxItemToStringConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is ComboBoxItem)
            {
                return ((ComboBoxItem)value).Content;
            }
            return value;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return value;
        }
    }
}
----------------------------------------------------------------------------------------------
FormConfig.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BankManagementSystem.Pages;
using BankManagementSystem.ViewModels;

namespace BankManagementSystem
{
    public static class FormConfig
    {
        public static AccountViewModel accountViewModel = null;
        public static DepositViewModel depositViewModel = null;
        public static WithdrawViewModel withdrawViewModel = null;
        public static NewAccountWindow newAccountWindow = null;
        public static EditAccountWindow editAccountWindow = null;
        public static DepositWindow depositWindow = null;
        public static AccountListWindow accountListWindow = null;
        public static WithdrawWindow withdrawWindow = null;
        public static DashBoardWindow dashBoardWindow = null;
        public static AccountViewWindow accountViewWindow = null;
       
        static FormConfig()
        {
            accountViewModel = new AccountViewModel();
            depositViewModel = new DepositViewModel();
            withdrawViewModel = new WithdrawViewModel();
            editAccountWindow = new EditAccountWindow();
            newAccountWindow = new NewAccountWindow();
            depositWindow = new DepositWindow();
            accountListWindow = new AccountListWindow();
            withdrawWindow = new WithdrawWindow();
            dashBoardWindow = new DashBoardWindow();
            accountViewWindow = new AccountViewWindow();

           
        }

    }
}
--------------------------------------------------------------------------------------------------------
Logger.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using log4net;

namespace BankManagementSystem
{
    public static class Logger
    {
        public static readonly ILog log = LogManager.GetLogger(typeof(Logger));
    }
}
-------------------------------------------------------------------------------------------------------
App.xaml

<Application x:Class="BankManagementSystem.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:BankManagementSystem"
             StartupUri="/Pages/LoginPageWindow.xaml">
    <Application.Resources>
        <local:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <local:ComboBoxItemToStringConverter x:Key="ComboBoxItemToStringConverter"/>

        <Style x:Key="MyTextBoxStyle" TargetType="TextBox">
            <Setter Property="Width" Value="300"/>
            <Setter Property="Margin" Value="100 0 0 0"/>
            <Setter Property="Height" Value="30"/>
            <Setter Property="Padding" Value="4 4 4 4"/>
            <Setter Property="BorderBrush" Value="gray"/>
            <Setter Property="BorderThickness" Value="1"/>
        </Style>

    </Application.Resources>
</Application>
------------------------------------------------------------------------------------------------
UnitTest1.cs

using System;
using System.Collections.ObjectModel;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using BankManagementSystem;
using BankManagementSystem.Models;
using BankManagementSystem.Databases;
using System.Linq;

namespace BankManagementAppTests
{
    [TestClass]
    public class AccountMemoryRepoTests
    {
        private AccountMemoryRepo _repo;
        [TestInitialize]
        public void initialize()
        {
            _repo = AccountMemoryRepo.Instance;
        }
        [TestMethod]
        public void Test_ReadAllAccounts()
        {
            _repo = AccountMemoryRepo.Instance;
            var accounts = _repo.ReadAll();

            Assert.AreEqual(2, accounts.Count);
            Assert.IsTrue(accounts.Any(a => a.AccountNumber == 1234));
            Assert.IsTrue(accounts.Any(a => a.AccountNumber == 12345));
        }

        [TestMethod]
        public void Test_CreateAccount()
        {
            var account = new Account()
            {
                AccountNumber = 49,
                Name = "Rishwin",
                Balance = 0,
                Type = "current",
                Email = "rishwin@gmail.com",
                PhoneNumber = "5236526526",
                Address = "address",
                IsActive = true,
                InterestPercentage = "0",
                TransactionCount = 0,
                LastTransactionDate = DateTime.Now,
            };
            _repo.Create(account);

            Assert.IsTrue(_repo.ReadAll().Any(ac => ac.AccountNumber == 49));
        }

        [TestMethod]
        public void Test_UpdateAccount()
        {
            Account account = new Account
            {
                AccountNumber = 1234,
                Name = "Minnu",
                Balance = 0,
                Type = "savings",
                Email = "minnu@gmail.com",
                PhoneNumber = "5236526526",
                Address = "Address",
                IsActive = true,
                InterestPercentage = "0",
                TransactionCount = 0,
                LastTransactionDate = DateTime.Now,
            };

            account.Address = "New Address";
            _repo.Update(account);
            Assert.AreEqual("New Address", _repo.ReadAll().First(a => a.AccountNumber == 1234).Address);
        }
        [TestMethod]
        public void Test_Deposit()
        {
            Account account = new Account
            {
                AccountNumber = 1234,
                Name = "Minnu",
                Balance = 0,
                Type = "savings",
                Email = "minnu@gmail.com",
                PhoneNumber = "5236526526",
                Address = "Address",
                IsActive = true,
                InterestPercentage = "0",
                TransactionCount = 0,
                LastTransactionDate = DateTime.Now,
            };

            _repo.Deposit(account.AccountNumber, 1000);
            Assert.AreEqual(1000 , _repo.ReadAll().First(ac => ac.AccountNumber == account.AccountNumber).Balance);
        }

        [TestMethod]
        public void Test_Withdraw()
        {
            var account = new Account()
            {
                AccountNumber = 12345,
                Name = "Ashna",
                Balance = 0,
                Type = "current",
                Email = "ashna@gmail.com",
                PhoneNumber = "5236526526",
                Address = "address",
                IsActive = true,
                InterestPercentage = "0",
                TransactionCount = 0,
                LastTransactionDate = DateTime.Now,
            };

            _repo.Deposit(account.AccountNumber, 1000);
            _repo.Withdrw(account.AccountNumber, 700);
            Assert.AreEqual(300, _repo.ReadAll().First(ac => ac.AccountNumber == account.AccountNumber).Balance);

        }

    }
}
